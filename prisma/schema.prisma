generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BookProject {
  id           String        @id @default(uuid())
  language     BookLanguage  @default(English)
  title        String
  subtitle     String?
  authorName   String
  contributors Contributor[]
  genre        BookGenre
  bookSection  BookSection[]
  addChapter   AddChapter[]
  addPart      AddPart[]
  design       BookDesign?
  pricing      BookPricing?
  frontMatter FrontMatter[]
  endMatter EndMatter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Contributor {
  id            String  @id @default(uuid())
  bookProjectId String? // TEMPORARILY optional

  bookProject BookProject?    @relation(fields: [bookProjectId], references: [id])
  role        ContributorRole
  name        String
  createdAt   DateTime        @default(now())
}

enum BookGenre {
  Fiction
  NonFiction
  Academic
  Poetry
  Cookbook
  Childrenbook
  Others
}

enum ContributorRole {
  Coauthor
  Editor
  Illustrator
}

enum BookLanguage {
  English
  Hindi
  Gujarati
  Bengali
  Tamil
  Telugu
}

model BookDesign {
  id            String      @id @default(cuid())
  bookProjectId String      @unique
  bookProject   BookProject @relation(fields: [bookProjectId], references: [id])

  size               String?
  bindingType        String?
  bookInteriorColour String?
  paperType          String?
  coverLamination    String?
  interiorDesign     String?
  coverPreview       String?
  coverFrontImage    String?
  bookPdfUrl         String?
}

model BookPricing {
  id            String      @id @default(uuid())
  bookProjectId String      @unique
  bookProject   BookProject @relation(fields: [bookProjectId], references: [id])

  packageId                   String
  packagePrice                Float
  paperbackPriceInd           Float?
  hardcoverPriceInd           Float?
  paperbackPriceInternational Float?
  hardcoverPriceInternational Float?
}

model FrontMatter {
  id String @id @default(uuid())
  bookProjectId String
  bookProject BookProject @relation(fields: [bookProjectId], references: [id])

  fronteMatterName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model EndMatter {
  id String @id @default(uuid())
  bookProjectId String
  bookProject BookProject @relation(fields: [bookProjectId], references: [id])

  endMatterName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model AddChapter {
  id            String      @id @default(uuid())
  bookProjectId String
  bookProject   BookProject @relation(fields: [bookProjectId], references: [id])

  chapterName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
}

model AddPart {
  id            String      @id @default(uuid())
  bookProjectId String
  bookProject   BookProject @relation(fields: [bookProjectId], references: [id])

  chapterId String
  partName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model BookSection {
  id            String      @id @default(uuid())
  bookProjectId String
  bookProject   BookProject @relation(fields: [bookProjectId], references: [id])

  type     SectionType // FrontMatter, Chapter, EndMatter
  title    String // e.g., "Dedication", "Chapter 1"
  order    Int // For ordering in sidebar and rendering
  content  String? // Optional: Rich content for the section
  parentId String? // For hierarchical parts (i.e., part belongs to chapter)
  parent   BookSection?  @relation("PartOf", fields: [parentId], references: [id])
  children BookSection[] @relation("PartOf")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum SectionType {
  FrontMatter
  Chapter
  EndMatter
  Part
}
