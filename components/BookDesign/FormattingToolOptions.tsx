"use client";
import { useState, useEffect } from "react"; // Import useEffect
import { Modal } from "./Modal";
import { UploadedDoc } from "./InteriorDesign";
// Import react-pdf components
import { Document, Page, pdfjs } from "react-pdf";
import "react-pdf/dist/esm/Page/AnnotationLayer.css";
import "react-pdf/dist/esm/Page/TextLayer.css";

// Ensure PDF worker is configured (can also be done in parent, but safe to have here too)
// Make sure the path '/pdf.worker.min.js' is correct relative to your public folder
pdfjs.GlobalWorkerOptions.workerSrc = `/pdf.worker.min.js`;


interface FormattingToolOptionProps {
  isSelected: boolean;
  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  value: string;
  onDocumentUpdate: (doc: UploadedDoc | null) => void;
  // Pass the current document from the parent to potentially show initial preview
  currentDocument: UploadedDoc | null;
}

const FORMATTING_STYLES = [
  { id: "classic", label: "Classic" },
  { id: "minimalist", label: "Minimalist" },
  { id: "modern", label: "Modern" },
];

// Helper to check if a doc likely came from this tool (adjust logic if needed)
const isFormattedDoc = (doc: UploadedDoc | null): boolean => {
  if (!doc) return false;
  // Example check: See if title contains style markers
  return FORMATTING_STYLES.some(style => doc.title.includes(`(${style.id})`));
};


export function FormattingToolOption({
  isSelected,
  onChange,
  value,
  onDocumentUpdate,
  currentDocument, // Receive current document from parent
}: FormattingToolOptionProps) {
  const radioId = "formatting-tool";
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalFile, setModalFile] = useState<File | null>(null);
  const [selectedStyle, setSelectedStyle] = useState<string>(FORMATTING_STYLES[0].id);
  const [isProcessing, setIsProcessing] = useState(false);
  const [modalError, setModalError] = useState<string | null>(null);

  // Local state to hold the URL for preview generated by *this* component
  const [previewDocUrl, setPreviewDocUrl] = useState<string | null>(null);

  // Effect to set initial preview if the currentDocument matches this option
  useEffect(() => {
    if (isSelected && currentDocument && isFormattedDoc(currentDocument)) {
       setPreviewDocUrl(currentDocument.cloudinaryUrl);
    } else if (!isSelected) {
        // Clear preview if this option is deselected
        setPreviewDocUrl(null);
    }
     // Only run when isSelected or currentDocument changes relevantly
  }, [isSelected, currentDocument?.cloudinaryUrl, currentDocument?.title]); // Depend on relevant parts


  const handleLaunchClick = () => {
    setIsModalOpen(true);
    setModalFile(null);
    setSelectedStyle(FORMATTING_STYLES[0].id);
    setModalError(null);
    setIsProcessing(false);
    // Don't clear preview here, only clear if deselected or new format starts
  };

  const handleModalClose = () => {
    if (isProcessing) return;
    setIsModalOpen(false);
  };

  const handleModalFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setModalFile(e.target.files?.[0] || null);
    setModalError(null);
  };

  const handleStyleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSelectedStyle(event.target.value);
  };

  const handleApplyFormat = async () => {
    if (!modalFile || !selectedStyle) {
      setModalError("Please select a DOCX file and choose a formatting style.");
      return;
    }
    if (isProcessing) return;

    setModalError(null);
    setIsProcessing(true);
    setPreviewDocUrl(null); // Clear previous preview before starting new process

    const formData = new FormData();
    formData.append("file", modalFile);
    formData.append("style", selectedStyle);

    try {
      const res = await fetch("/api/upload-with-template", {
        method: "POST",
        body: formData,
      });
      const responseData = await res.json();

      if (!res.ok) {
        const errorPayload = responseData as { error?: string; details?: string };
        throw new Error(errorPayload?.error || `Formatting failed: ${res.statusText}`);
      }
      if (typeof responseData !== "string" || !responseData.startsWith('http')) {
         console.error("API Response:", responseData);
         throw new Error("Received invalid URL data from the server after formatting.");
      }

      const cloudinaryUrl = responseData;
      const title = modalFile.name.replace(/\.docx$/i, "") || "Formatted Document";

      const formattedDoc: UploadedDoc = {
        id: cloudinaryUrl,
        title: `${title} (${selectedStyle})`, // Append style identifier
        cloudinaryUrl: cloudinaryUrl,
      };

      // Update local state for the preview *within this component*
      setPreviewDocUrl(formattedDoc.cloudinaryUrl);
      // Notify the parent component
      onDocumentUpdate(formattedDoc);

      setIsProcessing(false);
      setIsModalOpen(false);

    } catch (err: any) {
      console.error("Error during formatting:", err);
      setModalError(err.message || "An unexpected error occurred during formatting.");
      setPreviewDocUrl(null); // Clear preview on error
      setIsProcessing(false);
    }
  };

  // Handler for react-pdf load success (optional)
  const onDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {
    console.log(`Formatted PDF preview loaded with ${numPages} pages.`);
  };


  return (
    <>
      <div
        className={`border rounded-lg p-4 transition-all duration-300 ${
          isSelected ? "border-blue-500 bg-blue-50" : "border-gray-200"
        }`}
      >
        <div className="flex items-center">
          {/* Radio button and label */}
           <input
            id={radioId}
            type="radio"
            value={value}
            checked={isSelected}
            onChange={onChange}
            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
          />
          <label
            htmlFor={radioId}
            className="ml-3 block text-gray-900 font-medium cursor-pointer"
          >
            Use our interior formatting tool
          </label>
        </div>
        {isSelected && (
          <div className="flex flex-col md:flex-row gap-6 mt-4 pl-7">
            {/* Preview Area */}
            <div className="md:w-1/4 flex-shrink-0">
              <div className="aspect-[3/4] w-full max-w-[150px] mx-auto md:mx-0 rounded border border-gray-300 bg-gray-100 flex items-center justify-center overflow-hidden relative shadow-inner">
                {previewDocUrl ? (
                   <Document
                    file={previewDocUrl}
                    onLoadSuccess={onDocumentLoadSuccess}
                    loading={
                      <div className="p-2 text-center text-xs text-gray-500">
                        Loading Preview...
                      </div>
                    }
                    error={
                      <div className="p-2 text-center text-xs text-red-600">
                        Preview Error
                      </div>
                    }
                    className="flex justify-center items-center w-full h-full"
                  >
                    <Page
                      pageNumber={1}
                      width={150} // Match container width
                      renderTextLayer={false}
                      renderAnnotationLayer={false}
                      className="[&>canvas]:max-w-full [&>canvas]:h-auto [&>canvas]:max-h-full"
                    />
                  </Document>
                ) : (
                  <span className="text-gray-500 text-sm text-center px-2">
                    Formatted Book Preview
                  </span>
                )}
              </div>
              {/* Optionally display title below preview */}
              {previewDocUrl && currentDocument && isFormattedDoc(currentDocument) && (
                 <p
                   className="mt-1.5 text-xs text-center text-gray-700 truncate md:text-left"
                   title={currentDocument.title}
                 >
                   {currentDocument.title}
                 </p>
              )}
            </div>
            {/* Info and Button Area */}
            <div className="md:w-3/4">
              <p className="text-sm text-gray-600 mt-1">
                Works best for books with text and limited images.
              </p>
              <div className="mt-2 flex flex-col gap-1">
                <p className="text-sm text-blue-600">✓ Get Published in 2 days</p>
                <p className="text-sm text-blue-600">✓ Publish Print & eBook</p>
                <p className="text-sm text-blue-600">
                  ✓ Publish in India & sell in 150+ countries
                </p>
              </div>
              <button
                type="button"
                onClick={handleLaunchClick}
                className="mt-4 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors text-sm"
              >
                Launch Template
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Formatting Modal */}
      <Modal
        isOpen={isModalOpen}
        onClose={handleModalClose}
        title="Format Your Manuscript"
      >
        {/* Modal Content - No changes needed here */}
         <div className="space-y-4">
          {/* File Input */}
          <div>
            <label htmlFor="modal-file-input" className="block text-sm font-medium text-gray-700 mb-1">
              Upload .docx Manuscript
            </label>
            <input
              id="modal-file-input"
              type="file"
              accept=".docx,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
              onChange={handleModalFileChange}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50 disabled:pointer-events-none"
              disabled={isProcessing}
            />
            {modalFile && <p className="text-xs text-gray-600 mt-1 truncate">Selected: {modalFile.name}</p>}
          </div>
          {/* Style Selection */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Choose Formatting Style
            </label>
            <div className="flex flex-wrap gap-x-4 gap-y-2">
              {FORMATTING_STYLES.map((style) => (
                <div key={style.id} className="flex items-center">
                  <input
                    id={`style-${style.id}`}
                    name="formatting-style"
                    type="radio"
                    value={style.id}
                    checked={selectedStyle === style.id}
                    onChange={handleStyleChange}
                    disabled={isProcessing}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                  />
                  <label htmlFor={`style-${style.id}`} className="ml-2 block text-sm text-gray-700">
                    {style.label}
                  </label>
                </div>
              ))}
            </div>
          </div>
          {/* Error Display */}
          {modalError && (
             <p className="mt-2 text-sm text-red-600 bg-red-50 border border-red-200 p-2 rounded">
               <span className="font-medium">Error:</span> {modalError}
             </p>
           )}
          {/* Action Button */}
          <div className="flex justify-end pt-4 border-t mt-4">
            <button
              type="button"
              onClick={handleApplyFormat}
              disabled={!modalFile || !selectedStyle || isProcessing}
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
              {isProcessing ? ( /* ... loading spinner ... */ "Processing...") : ("Apply Format & Upload")}
            </button>
          </div>
        </div>
      </Modal>
    </>
  );
}